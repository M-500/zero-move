// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.0
// source: rpc/dump.proto

package dump

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DumpClient is the client API for Dump service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DumpClient interface {
	ParserExcel(ctx context.Context, in *ParserRequest, opts ...grpc.CallOption) (*ParserResponse, error)
	FindParserJobById(ctx context.Context, in *FindParserJonRequest, opts ...grpc.CallOption) (*FindParserJonResponse, error)
	UpdateParserJob(ctx context.Context, in *UpdateParserJonRequest, opts ...grpc.CallOption) (*UpdateParserJonResponse, error)
}

type dumpClient struct {
	cc grpc.ClientConnInterface
}

func NewDumpClient(cc grpc.ClientConnInterface) DumpClient {
	return &dumpClient{cc}
}

func (c *dumpClient) ParserExcel(ctx context.Context, in *ParserRequest, opts ...grpc.CallOption) (*ParserResponse, error) {
	out := new(ParserResponse)
	err := c.cc.Invoke(ctx, "/dump.Dump/ParserExcel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dumpClient) FindParserJobById(ctx context.Context, in *FindParserJonRequest, opts ...grpc.CallOption) (*FindParserJonResponse, error) {
	out := new(FindParserJonResponse)
	err := c.cc.Invoke(ctx, "/dump.Dump/FindParserJobById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dumpClient) UpdateParserJob(ctx context.Context, in *UpdateParserJonRequest, opts ...grpc.CallOption) (*UpdateParserJonResponse, error) {
	out := new(UpdateParserJonResponse)
	err := c.cc.Invoke(ctx, "/dump.Dump/UpdateParserJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DumpServer is the server API for Dump service.
// All implementations must embed UnimplementedDumpServer
// for forward compatibility
type DumpServer interface {
	ParserExcel(context.Context, *ParserRequest) (*ParserResponse, error)
	FindParserJobById(context.Context, *FindParserJonRequest) (*FindParserJonResponse, error)
	UpdateParserJob(context.Context, *UpdateParserJonRequest) (*UpdateParserJonResponse, error)
	mustEmbedUnimplementedDumpServer()
}

// UnimplementedDumpServer must be embedded to have forward compatible implementations.
type UnimplementedDumpServer struct {
}

func (UnimplementedDumpServer) ParserExcel(context.Context, *ParserRequest) (*ParserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParserExcel not implemented")
}
func (UnimplementedDumpServer) FindParserJobById(context.Context, *FindParserJonRequest) (*FindParserJonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindParserJobById not implemented")
}
func (UnimplementedDumpServer) UpdateParserJob(context.Context, *UpdateParserJonRequest) (*UpdateParserJonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParserJob not implemented")
}
func (UnimplementedDumpServer) mustEmbedUnimplementedDumpServer() {}

// UnsafeDumpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DumpServer will
// result in compilation errors.
type UnsafeDumpServer interface {
	mustEmbedUnimplementedDumpServer()
}

func RegisterDumpServer(s grpc.ServiceRegistrar, srv DumpServer) {
	s.RegisterService(&Dump_ServiceDesc, srv)
}

func _Dump_ParserExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DumpServer).ParserExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dump.Dump/ParserExcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DumpServer).ParserExcel(ctx, req.(*ParserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dump_FindParserJobById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindParserJonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DumpServer).FindParserJobById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dump.Dump/FindParserJobById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DumpServer).FindParserJobById(ctx, req.(*FindParserJonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dump_UpdateParserJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateParserJonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DumpServer).UpdateParserJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dump.Dump/UpdateParserJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DumpServer).UpdateParserJob(ctx, req.(*UpdateParserJonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dump_ServiceDesc is the grpc.ServiceDesc for Dump service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dump_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dump.Dump",
	HandlerType: (*DumpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParserExcel",
			Handler:    _Dump_ParserExcel_Handler,
		},
		{
			MethodName: "FindParserJobById",
			Handler:    _Dump_FindParserJobById_Handler,
		},
		{
			MethodName: "UpdateParserJob",
			Handler:    _Dump_UpdateParserJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/dump.proto",
}
